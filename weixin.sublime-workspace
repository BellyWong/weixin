{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"for",
				"FormFile	multipart.File, *multipart.FileHeader, error ƒ"
			],
			[
				"f",
				"f	multipart.File ν"
			],
			[
				"fie",
				"FileSystem	interface ¡"
			],
			[
				"File",
				"FileServer	http.Handler ƒ"
			],
			[
				"in",
				"Intn	int ƒ"
			],
			[
				"lo",
				"locs	[]mongo.M ν"
			],
			[
				"sp",
				"Sprintf	string ƒ"
			],
			[
				"Sp",
				"Sprintf	string ƒ"
			],
			[
				"F",
				"Fprintln	n int, err error ƒ"
			],
			[
				"sh",
				"shop	*entry.Item ν"
			],
			[
				"bui",
				"buildCoverPicMsg	entry.PicResponse ƒ"
			],
			[
				"l",
				"Location_Y	float64 ν"
			],
			[
				"pr",
				"Println	n int, err error ƒ"
			],
			[
				"c",
				"Cursor	mongo.Cursor, error ƒ"
			],
			[
				"prin",
				"Println	 ƒ"
			],
			[
				"co",
				"cond	mongo.M ν"
			],
			[
				"ms",
				"MsgType	string ν"
			],
			[
				"fun",
				"func	func {...} ʂ"
			],
			[
				"rq",
				"request	*entry.ReqMessage ν"
			],
			[
				"tx",
				"TxtResponse	struct ʈ"
			],
			[
				"T",
				"TxtResponse	struct ʈ"
			],
			[
				"re",
				"request	*entry.ReqMessage ν"
			],
			[
				"im",
				"import	import (...) ʂ"
			],
			[
				"v",
				"weixinValid	 ƒ"
			],
			[
				"Fr",
				"FormValue	string ƒ"
			],
			[
				"r",
				"req	*http.Request ν"
			],
			[
				"fo",
				"foods	[]mongo.M ν"
			],
			[
				"m",
				"mongo	 package ρ"
			],
			[
				"P",
				"Panicln	 ƒ"
			],
			[
				"fa",
				"Fatalln	 ƒ"
			],
			[
				"er",
				"err	error ν"
			],
			[
				"newS",
				"NewSingleHostReverseProxy	*httputil.ReverseProxy ƒ"
			],
			[
				"news",
				"NewSingleHostReverseProxy	*httputil.ReverseProxy ƒ"
			],
			[
				"Re",
				"NewRequest	*http.Request, error ƒ"
			],
			[
				"print",
				"Println	 ƒ"
			],
			[
				"ite",
				"item	*Item ν"
			],
			[
				"Up",
				"Upsert	error ƒ"
			],
			[
				"item",
				"items	[]*Item ν"
			],
			[
				"resp",
				"response	*PicResponse ν"
			],
			[
				"i",
				"Item	struct ʈ"
			],
			[
				"di",
				"NewDialPool	*mongo.Pool ƒ"
			],
			[
				"new",
				"NewDialPool	*mongo.Pool ƒ"
			],
			[
				"Di",
				"NewDialPool	*mongo.Pool ƒ"
			],
			[
				"de",
				"DefaultLastErrorCmd	interface{} ν"
			],
			[
				"D",
				"Database	struct ʈ"
			],
			[
				"Ope",
				"OpenFile	file *os.File, err error ƒ"
			],
			[
				"op",
				"OpenFile	file *os.File, err error ƒ"
			],
			[
				"Fi",
				"Find	goquery.Nodes ƒ"
			],
			[
				"a",
				"Attr	string ƒ"
			],
			[
				"e",
				"Each	 ƒ"
			],
			[
				"s",
				"size	int ν"
			],
			[
				"E",
				"Eq	goquery.Nodes ƒ"
			],
			[
				"fi",
				"Find	goquery.Nodes ƒ"
			],
			[
				"p",
				"Print	 ƒ"
			],
			[
				"pa",
				"ParseUrl	goquery.Nodes, error ƒ"
			],
			[
				"stat",
				"StatusOK	 Ɩ"
			],
			[
				"sta",
				"StatusCode	int ν"
			],
			[
				"Sta",
				"StatusOK	 Ɩ"
			],
			[
				"tol",
				"ToLower	string ƒ"
			],
			[
				"d",
				"DialTCP	*net.TCPConn, error ƒ"
			],
			[
				"dia",
				"DialTCP	*net.TCPConn, error ƒ"
			],
			[
				"R",
				"Request	struct ʈ"
			],
			[
				"t",
				"time	 package ρ"
			],
			[
				"un",
				"Unix	int64 ƒ"
			],
			[
				"ch",
				"ch2	chan int32 ν"
			],
			[
				"no",
				"Now	time.Time ƒ"
			],
			[
				"fu",
				"func	Function"
			],
			[
				"vale",
				"Value	struct ʈ"
			],
			[
				"me",
				"MethodByName	reflect.Value ƒ"
			],
			[
				"Meh",
				"MethodByName	reflect.Value ƒ"
			],
			[
				"va",
				"ValueOf	reflect.Value ƒ"
			],
			[
				"Tr",
				"TrimRight	string ƒ"
			],
			[
				"set",
				"SetReadBuffer	error ƒ"
			],
			[
				"lis",
				"ListenTCP	*net.TCPListener, error ƒ"
			],
			[
				"Lis",
				"ListenTCP	*net.TCPListener, error ƒ"
			],
			[
				"rea",
				"Read	n int, err error ƒ"
			],
			[
				"read",
				"ReadFrom	int64, error ƒ"
			],
			[
				"Tcp",
				"TCPConn	struct ʈ"
			],
			[
				"Prin",
				"Println	 ƒ"
			],
			[
				"Pr",
				"Println	 ƒ"
			],
			[
				"li",
				"ListenTCP	*net.TCPListener, error ƒ"
			],
			[
				"pri",
				"Println	 ƒ"
			],
			[
				"file",
				"file	os.FileInfo ν"
			],
			[
				"fil",
				"FileMode	uint32 ʈ"
			],
			[
				"buf",
				"buff	[]byte ν"
			],
			[
				"bu",
				"buff	[]byte ν"
			],
			[
				"std",
				"Stdin	*os.File ν"
			],
			[
				"se",
				"SetWriteDeadline	error ƒ"
			],
			[
				"setRe",
				"SetWriteBuffer	error ƒ"
			],
			[
				"B",
				"SetWriteBuffer	error ƒ"
			],
			[
				"Dia",
				"DialTCP	*net.TCPConn, error ƒ"
			],
			[
				"json",
				"_json	string ν"
			],
			[
				"wr",
				"writer	http.ResponseWriter ν"
			],
			[
				"Get",
				"Getgid	int ƒ"
			],
			[
				"Ha",
				"HandleFunc	 ƒ"
			],
			[
				"IN",
				"init	func init() ʂ"
			],
			[
				"w",
				"Write	int, error ƒ"
			],
			[
				"ma",
				"Marshal	[]byte, error ƒ"
			],
			[
				"ha",
				"HandleFunc	 ƒ"
			],
			[
				"do",
				"down2	int32 ν"
			],
			[
				"get",
				"Getenv	string ƒ"
			],
			[
				"open",
				"OpenFile	file *os.File, err error ƒ"
			],
			[
				"Sq",
				"Sqrt	float64 ƒ"
			],
			[
				"SQ",
				"Sqrt	float64 ƒ"
			],
			[
				"n",
				"Now	time.Time ƒ"
			],
			[
				"rp",
				"rpcGo	*rpc.Call ν"
			],
			[
				"ser",
				"Serve	error ƒ"
			],
			[
				"ca",
				"cal	*Calculator ν"
			],
			[
				"Cal",
				"Calculator	struct ʈ"
			],
			[
				"C",
				"Calculator	struct ʈ"
			],
			[
				"Han",
				"HandleFunc	 ƒ"
			],
			[
				"han",
				"Handle	 ƒ"
			],
			[
				"post",
				"PostForm	resp *http.Response, err error ƒ"
			],
			[
				"io",
				"ioutil	 package ρ"
			],
			[
				"da",
				"DialIP	*net.IPConn, error ƒ"
			],
			[
				"Wri",
				"Write	n int, err error ƒ"
			],
			[
				"M",
				"Marshal	[]byte, error ƒ"
			],
			[
				"New",
				"NewIMClient	client *IMClient ƒ"
			],
			[
				"RE",
				"Response	struct ʈ"
			],
			[
				"Im",
				"IMClient	struct ʈ"
			],
			[
				"cl",
				"cclient	*CenterClient ν"
			],
			[
				"fma",
				"FormatFloat	string ƒ"
			],
			[
				"fl",
				"FormatFloat	string ƒ"
			],
			[
				"Print",
				"Println	n int, err error ƒ"
			],
			[
				"cou",
				"countDonw	 ν"
			],
			[
				"time",
				"timeout	chan bool ν"
			],
			[
				"mu",
				"musicName	string ν"
			],
			[
				"Pri",
				"Println	n int, err error ƒ"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "package main\n\nimport (\n	\"crypto/sha1\"\n	\"encoding/xml\"\n	\"entry\"\n	\"fmt\"\n	\"github.com/garyburd/go-mongo/mongo\"\n	\"io/ioutil\"\n	\"log\"\n	\"math/rand\"\n	\"net/http\"\n	\"net/http/httputil\"\n	\"net/url\"\n	\"sort\"\n	\"time\"\n)\n\nconst (\n	basiurl    = \"http://redis.io/commands/\"\n	forwardurl = \"http://localhost:8080/\"\n	token      = \"betago\"\n	welcome    = \"欢迎使用美食助手应用，您可以属于希望的文字获得美食、发送地理位置可以查询附近餐馆哦！愿你在这里发现生活真正的意义~业务合作微信账号:blackbeans\"\n)\n\nvar pool *mongo.Pool\n\nfunc init() {\n	pool = mongo.NewDialPool(\"localhost:27018\", 1000)\n}\n\n// func main() {\n\n// 	msg := entry.LocRequest{}\n// 	msg.Location_X = 23.312\n// 	msg.Location_Y = 120.8\n// 	locMessageProcess(msg, nil)\n// }\n\nfunc main() {\n	http.HandleFunc(\"/weixin\", WexinHandler)\n\n	http.HandleFunc(\"/forward\", ForwardHandler)\n	http.ListenAndServe(\":80\", nil)\n\n	http.FileServer(http.Dir(\"/\"))\n}\n\nfunc ForwardHandler(wr http.ResponseWriter, req *http.Request) {\n	link, err := url.Parse(forwardurl)\n	if nil != err {\n		panic(err)\n	}\n	proxy := httputil.NewSingleHostReverseProxy(link)\n	proxy.ServeHTTP(wr, req)\n\n}\n\nfunc weixinValid(resp http.ResponseWriter, req *http.Request) {\n	signature := req.FormValue(\"signature\")\n	timestamp := req.FormValue(\"timestamp\")\n	nonce := req.FormValue(\"nonce\")\n	echostr := req.FormValue(\"echostr\")\n\n	vali := func() string {\n		strs := sort.StringSlice{token, timestamp, nonce}\n		sort.Strings(strs)\n		str := \"\"\n		for _, s := range strs {\n			str += s\n		}\n\n		h := sha1.New()\n		h.Write([]byte(str))\n		return fmt.Sprintf(\"%x\", h.Sum(nil))\n	}()\n\n	if vali == signature {\n		resp.Write([]byte(echostr))\n	} else {\n		resp.Write([]byte(\"\"))\n	}\n	return\n}\n\nfunc WexinHandler(resp http.ResponseWriter, req *http.Request) {\n\n	log.Println(\"method:\", req.Method)\n	if req.Method == \"GET\" {\n		weixinValid(resp, req)\n	} else {\n\n		data, err := ioutil.ReadAll(req.Body)\n		if nil != err {\n			log.Println(\"read body err:\", err)\n			return\n		}\n		log.Println(\"data:\", string(data))\n\n		request := &entry.ReqMessage{}\n		er := xml.Unmarshal(data, request)\n		if nil != er {\n			log.Println(\"decode body err:\", er)\n			return\n		}\n\n		event := request.Event\n		msgType := request.MsgType\n		ch := make(chan interface{})\n		defer close(ch)\n		if \"event\" == msgType && event == \"subscribe\" {\n			//添加关注事件\n			go subEventProcess(*request, ch)\n\n		} else if \"event\" == msgType && event == \"unsubscribe\" {\n			//取消订阅\n			go unsubEventProcess(*request, ch)\n\n		} else if \"location\" == msgType {\n			//地理位置\n			var msg entry.LocRequest\n			err := xml.Unmarshal(data, &msg)\n			if nil != err {\n				log.Println(\"decode txt request body err:\", err)\n				return\n			}\n\n			go locMessageProcess(msg, ch)\n\n		} else {\n			var msg entry.TxtRequest\n			err := xml.Unmarshal(data, &msg)\n			if nil != err {\n				log.Println(\"decode txt request body err:\", er)\n				return\n			}\n\n			go txtMessageProcess(msg, ch)\n		}\n\n		brespons, _ := xml.Marshal(<-ch)\n		log.Println(string(brespons))\n		resp.Write(brespons)\n	}\n}\n\nfunc locMessageProcess(msg entry.LocRequest, ch chan interface{}) {\n	conn, _ := pool.Get()\n	db := &mongo.Database{conn, \"search\", mongo.DefaultLastErrorCmd}\n	coll := db.C(\"resturant\")\n	cond := mongo.M{\"$near\": mongo.A{msg.Location_X, msg.Location_Y}}\n	fields := mongo.M{\"name\": 1, \"province\": 1, \"city\": 1, \"district\": 1, \"_id\": 0, \"description.tel\": 1}\n	cursor, err := coll.Find(mongo.M{\"geoloc\": cond}).Fields(fields).Limit(1).Cursor()\n	if nil != err {\n		log.Println(\"query mongo fail |\", err)\n		return\n	}\n\n	defer cursor.Close()\n\n	locs := traverseQueryResult(cursor, 10)\n\n	idx := rand.Intn(len(locs))\n	loc := locs[idx]\n	resp := buildCoverPicMsg(msg.ReqMessage)\n	// fmt.Println(val)\n	shop := resp.Articles.Items[0]\n	desc := loc[\"description\"].(map[string]interface{})\n	shop.Title = fmt.Sprintf(\"离你最近的餐馆 :%s(电话:%s)\", loc[\"name\"], desc[\"tel\"])\n	shop.Description = fmt.Sprintf(\"地址:%s,%s,%s\", loc[\"province\"], loc[\"city\"], loc[\"district\"])\n\n	ch <- resp\n\n}\n\nfunc subEventProcess(msg entry.ReqMessage, ch chan interface{}) {\n	resp := buildCoverPicMsg(msg)\n	ch <- resp\n}\n\nfunc unsubEventProcess(msg entry.ReqMessage, ch chan interface{}) {\n	resp := buildTxtMsg(\"感谢您的关注，希望您下次继续光顾本应用^_^!\", \"text\")\n	resp.FromUserName = msg.ToUserName\n	resp.ToUserName = msg.FromUserName\n	ch <- *resp\n}\n\nfunc txtMessageProcess(msg entry.TxtRequest, ch chan interface{}) {\n	code := msg.Content\n	foods := query(10, code)\n	var response interface{}\n	if len(foods) <= 0 {\n		resp := buildTxtMsg(\"很遗憾你是吃货，没找到你的美食,你可以搜索爆米花!\", msg.MsgType)\n		resp.FromUserName = msg.ToUserName\n		resp.ToUserName = msg.FromUserName\n		response = *resp\n	} else {\n		resp := &entry.PicResponse{}\n		items := make([]*entry.Item, 0)\n\n		for _, m := range foods {\n\n			item := &entry.Item{}\n			item.Title = m[\"name\"].(string)\n			item.PicUrl = m[\"img_url\"].(string)\n			item.Url = m[\"link\"].(string)\n			item.Description = m[\"name\"].(string)\n			items = append(items, item)\n		}\n\n		art := &entry.Articles{}\n		art.Items = items\n		resp.Articles = art\n		resp.FromUserName = msg.ToUserName\n		resp.ToUserName = msg.FromUserName\n		resp.MsgType = \"news\"\n		resp.FuncFlag = 1\n		resp.CreateTime = time.Duration(time.Now().Unix())\n		resp.ArticleCount = len(foods)\n		response = resp\n	}\n	ch <- response\n}\n\nfunc query(limit int, code string) []mongo.M {\n	conn, _ := pool.Get()\n	db := &mongo.Database{conn, \"meishi\", mongo.DefaultLastErrorCmd}\n	coll := db.C(\"foods\")\n	cursor, err := coll.Find(mongo.M{\"name\": mongo.M{\"$regex\": code}}).Limit(limit).Cursor()\n	if nil != err {\n		log.Println(\"query mongo fail |\", err)\n		return nil\n	}\n\n	defer cursor.Close()\n\n	return traverseQueryResult(cursor, limit)\n}\n\nfunc traverseQueryResult(cursor mongo.Cursor, limit int) []mongo.M {\n	foods := make([]mongo.M, 0)\n	i := 0\n\n	for cursor.HasNext() && i < limit {\n		var m mongo.M\n		err := cursor.Next(&m)\n		if nil != err {\n			log.Println(\"decode mongo map fail|\", err)\n			continue\n		}\n\n		foods = append(foods, m)\n		i++\n	}\n	return foods\n}\n\nfunc buildTxtMsg(content string, msgType string) *entry.TxtResponse {\n	resp := &entry.TxtResponse{}\n	resp.MsgType = msgType\n	resp.FuncFlag = 0\n	resp.Content = content\n	resp.CreateTime = time.Duration(time.Now().Unix())\n	return resp\n}\n\nfunc buildCoverPicMsg(msg entry.ReqMessage) entry.PicResponse {\n	resp := entry.PicResponse{}\n	items := make([]*entry.Item, 0)\n\n	foods := query(10, \"豆腐\")\n\n	if len(foods) >= 1 {\n		idx := rand.Intn(len(foods))\n		m := foods[idx]\n		item := &entry.Item{}\n		item.Title = m[\"name\"].(string)\n		item.PicUrl = m[\"img_url\"].(string)\n		item.Url = m[\"link\"].(string)\n		item.Description = welcome\n		items = append(items, item)\n	}\n\n	art := &entry.Articles{}\n	art.Items = items\n	resp.Articles = art\n	resp.FromUserName = msg.ToUserName\n	resp.ToUserName = msg.FromUserName\n	resp.MsgType = \"news\"\n	resp.FuncFlag = 1\n	resp.CreateTime = time.Duration(time.Now().Unix())\n	resp.ArticleCount = 1\n\n	return resp\n}\n",
			"file": "src/weixin.go",
			"file_size": 7038,
			"file_write_time": 1365315622000000,
			"settings":
			{
				"buffer_size": 6741,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"re",
				"CTags: Rebuild Tags"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"gitadd",
				"Git: Add..."
			],
			[
				"git",
				"Git: Pull"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git ",
				"Git: Gui"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git di",
				"Git: Diff Tool Current File"
			],
			[
				"git dif",
				"Git: Diff Current File"
			],
			[
				"gitdif",
				"Git: Diff All"
			],
			[
				"gitdi",
				"Git: Diff Current File"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"rei",
				"CTags: Rebuild Tags"
			],
			[
				"",
				"Build: Build"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"tag",
				"CTags: Rebuild Tags"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"rebu",
				"CTags: Rebuild Tags"
			],
			[
				"s",
				"SFTP: Browse Server…"
			],
			[
				"set",
				"Set Syntax: Go"
			],
			[
				"reb",
				"CTags: Rebuild Tags"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"rebui",
				"CTags: Rebuild Tags"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"GoSublime: ",
				"GoSublime: Show last build output"
			],
			[
				"gos",
				"Set Syntax: GoSublime Commander"
			],
			[
				"gosulime",
				"GoSublime: Show errors"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"clea",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: main()"
			],
			[
				"code ",
				"GoSublime: Install/Update MarGo and Gocode"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"Package Control: insa",
				"Package Control: Install Package"
			],
			[
				"run",
				"GoSublime: Play/Run (current file only)"
			],
			[
				"fo",
				"GoSublime: Play/Run (current file only)"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"pci",
				"Package Control: Install Package"
			],
			[
				"Package Control: install package",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: int",
				"Package Control: Install Package"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 170.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/Xmx/workspace/google/weixin/src/entry/entry.go",
		"/usr/local/go/src/pkg/net/http/doc.go",
		"/usr/local/go/src/pkg/net/http/server.go",
		"/Users/Xmx/workspace/google/weixin/src/wxid.jpg",
		"/Users/Xmx/workspace/google/weixin/src/start.sh",
		"/Users/Xmx/workspace/google/weixin/src/weixin.go",
		"/Users/Xmx/workspace/google/weixin/src/main.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/Git/Git.sublime-settings",
		"/Users/Xmx/workspace/google/weixin/src/entry/main.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/GoSublime/GoSublime.sublime-settings",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/User/GoSublime.sublime-settings",
		"/Users/Xmx/workspace/google/weixin/weixin.sublime-project",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/weixin/entry.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/weixin/meishi.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/weixin/crawler2.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/GoSublime/CHANGELOG.md",
		"/usr/local/go/src/pkg/net/http/httputil/reverseproxy.go",
		"/usr/local/go/src/pkg/net/http/client.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/test.go",
		"/usr/local/go/src/pkg/fmt/print.go",
		"/Users/Xmx/Desktop/wx_sample.php",
		"/usr/local/go/src/pkg/time/time.go",
		"/usr/local/go/src/pkg/strconv/itoa.go",
		"/usr/local/go/src/pkg/github.com/garyburd/go-mongo/mongo/database.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/crawler.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/photo.go",
		"/usr/local/go/src/pkg/sync/mutex.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/GBK Encoding Support/tmp/db_collection_conf_demo.properties                %2FUsers%2FXmx%2Fworkspace%2Fimmomo%2Flib%2Fgeo-dbrouter%2Fbranches%2F1.0.0-SNAPSHOT%2Fsrc%2Fmain%2Fresources%2Fdb_collection_conf_demo.properties",
		"/usr/local/go/src/pkg/sync/runtime.go",
		"/Users/Xmx/workspace/immomo/lib/geo-dbrouter/branches/1.0.0-SNAPSHOT/src/main/resources/db_collection_conf_demo.properties",
		"/usr/local/go/src/pkg/net/tcpsock_plan9.go",
		"/usr/local/go/src/pkg/syscall/syscall.go",
		"/usr/local/go/src/pkg/syscall/zerrors_plan9_386.go",
		"/usr/local/go/src/pkg/net/tcpsock.go",
		"/usr/local/go/src/pkg/net/tcpsock_posix.go",
		"/usr/local/go/src/pkg/os/file.go",
		"/usr/local/go/src/pkg/os/file_plan9.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/demo.go",
		"/usr/local/go/src/pkg/net/rpc/server.go",
		"/usr/local/go/src/pkg/bufio/bufio.go",
		"/usr/local/go/src/pkg/net/fd.go",
		"/Users/Xmx/workspace/google/cgss/dic/dic-demo.txt",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/main.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/CTags/CTags.sublime-settings",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/imentry/entry.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/User/CTags.sublime-settings",
		"/usr/local/go/src/pkg/fmt/doc.go",
		"/usr/local/go/src/pkg/builtin/builtin.go",
		"/usr/local/go/src/pkg/encoding/json/bench_test.go",
		"/usr/local/go/src/pkg/math/abs.go",
		"/usr/local/go/src/pkg/os/file_windows.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/net/rpcdemo.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/ipc/centerserver.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/demo",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/imentry/entry_demo.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/ipc/centerclient.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/rpcdemo.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/net/network.go",
		"/usr/local/go/src/pkg/net/rpc/client.go",
		"/usr/local/go/src/pkg/net/dial.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/ipc/client.go",
		"/usr/local/go/src/pkg/io/ioutil/ioutil.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/ipc/server.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/ipc/client_test.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/ipc/centerserver_test.go",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/ipc/centerserver_test.g",
		"/Users/Xmx/workspace/google/cgss/src/com.blackbeans/entry/entry.go",
		"/Users/Xmx/workspace/google/cgss/cgss.sublime-project",
		"/Users/Xmx/workspace/google/cgss/src/ipc/server.go",
		"/Users/Xmx/workspace/google/cgss/src/main/main.go",
		"/Users/Xmx/workspace/google/cgss/cgss.sublime-workspace",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/main/channeltest.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/main/mplayer.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/player/player.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/player/typeplayer.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/manager/manager.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/entry/entry.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/manager/manager_test.go",
		"/usr/local/go/src/pkg/strconv/atob.go",
		"/usr/local/go/src/pkg/strconv/atoi.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/player/typeplayer_test.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/manager/manager.txt",
		"/Users/Xmx/workspace/google/musicplayer/pkg/darwin_amd64/com.blackbeans/entry.a",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/player/IPlayer",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/manager/IPlayer",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/User/Default (OSX).sublime-keymap",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/DocBlockr/Base File.sublime-settings",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/User/Go.sublime-settings",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/GoSublime/AUTHORS.md",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/musicplayer/musicplayer.go",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/manager/manager_test.txt",
		"/Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/main/main.go",
		"/Users/Xmx/workspace/google/musicplayer/src/manager/manager.go",
		"/Users/Xmx/workspace/google/musicplayer/src/main/main.go",
		"/Users/Xmx/workspace/google/musicplayer/musicplayer.sublime-project",
		"/Users/Xmx/workspace/google/musicplayer/src/entry/entry.go",
		"/Users/Xmx/workspace/google/musicplayer/src/main/main",
		"/Users/Xmx/workspace/google/musicplayer/src/main.go",
		"/Users/Xmx/workspace/google/musicplayer/musicplayer.sublime-workspace",
		"/Users/Xmx/workspace/google/musicplayer/src/manager/manager_test.go",
		"/Users/Xmx/workspace/google/musicplayer/bin/sftp-config.json",
		"/Users/Xmx/workspace/google/musicplayer/musicplayer/musicplayer.go",
		"/Users/Xmx/workspace/google/musicplayer/src/musicplayer.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/User/Base File.sublime-settings",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/Package Control/Package Control.sublime-settings",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/Xmx/workspace/google/musicplayer/src/musicplayer/main.go",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/User/Package Control.sublime-settings",
		"/Users/Xmx/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/Xmx/workspace/google/sorter/src/sorter/sorter.go",
		"/Users/Xmx/workspace/google/sorter/sorter.sublime-project",
		"/Users/Xmx/workspace/google/golang/demo/src/simplemath/add.go",
		"/Users/Xmx/workspace/google/golang/demo/demo.sublime-project",
		"/Users/Xmx/workspace/google/golang/demo/src/calc/calc.go"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"FileSystem",
			"Dir",
			"	\n",
			"http.HandleFunc(\"/\", WelcomeHandler)",
			"							",
			"							<",
			" </",
			"\"<",
			"tdir",
			"sdir",
			"sDir",
			"sdir",
			"sDir",
			"sdir",
			"readdir",
			"Serve",
			"SendResponse",
			"sendResponse",
			"write(",
			"write",
			"	writer.Header().Set(\"Content-Type\", \"text\")",
			"\"\n",
			"	\n",
			")\n",
			"true",
			"!\")",
			"fmt",
			"sic",
			"strconv",
			"}()\n",
			"handleManagerCommand",
			"}()\n",
			"playerWMAPlayer",
			"Play",
			"\n",
			"WMAPlayer",
			"Mp3Playerer",
			"\n",
			"		\"path\": \"src\"\n",
			"         \"env\": {\"GOROOT\": \"${home}/workspace/google/sorter/\",\"GOPATH\":\"/usr/local/go/bin\"},",
			"         ",
			"sorter",
			"\"GOPATH\": \"/Users/Xmx/workspace/google/sorter\"",
			"package",
			"var infile *string = flag.\n",
			"flag",
			"simplemath",
			")\n",
			"Atoi",
			"simplemath",
			" )}",
			".,",
			"\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/weixin.go",
					"settings":
					{
						"buffer_size": 6741,
						"regions":
						{
						},
						"selection":
						[
							[
								1207,
								1207
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"incomplete_sync": null,
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"remote_loading": false,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": false,
							"sublimelinter_mark_style": "outline",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"synced": false,
							"syntax": "Packages/GoSublime/GoSublime.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 697.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.9o:///Users/Xmx/workspace/google/cgss/src/com.blackbeans/main":
	{
		"height": 148.0
	},
	"output.9o:///Users/Xmx/workspace/google/cgss/src/com.blackbeans/main/weixin":
	{
		"height": 246.0
	},
	"output.9o:///Users/Xmx/workspace/google/weixin":
	{
		"height": 100.0
	},
	"output.9o:///Users/Xmx/workspace/google/weixin/entry":
	{
		"height": 100.0
	},
	"output.9o:///Users/Xmx/workspace/google/weixin/src":
	{
		"height": 100.0
	},
	"output.9o:///Users/Xmx/workspace/google/weixin/src/entry":
	{
		"height": 100.0
	},
	"output.GoSublime-source-output":
	{
		"height": 100.0
	},
	"output.GsDepends-output":
	{
		"height": 100.0
	},
	"output.GsDoc-output-output":
	{
		"height": 143.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.git":
	{
		"height": 162.0
	},
	"output.gscommander:///Users/Xmx/workspace/google/musicplayer/src/com.blackbeans/entry":
	{
		"height": 298.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"entry",
				"src/entry/entry.go"
			],
			[
				"en",
				"src/entry/entry.go"
			],
			[
				"",
				"/Users/Xmx/workspace/google/golang/helloworld.go"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/Users/Xmx/workspace/google/sorter/sorter.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 272.0,
	"status_bar_visible": true
}
